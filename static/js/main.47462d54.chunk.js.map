{"version":3,"sources":["scripts/utilities.js","scripts/graph/Minheap.js","scripts/graph/SearchStrategy.js","scripts/graph/graphAlgos.js","scripts/maze/maze.js","scripts/square.jsx","scripts/navbar.jsx","scripts/legend.jsx","scripts/subbanner.jsx","scripts/board.jsx","App.js","reportWebVitals.js","index.js"],"names":["generateGridWithNewNode","grid","oldstart","oldend","i","j","startClicked","endClicked","out","slice","newnode","startNode","old","from","wall","start","updateNode","endNode","end","minHeap","this","head","length","shift","item","push","sort","a","b","dist","SearchStrategy","type","g","BfsStrategy","DfsStrategy","AstarStrategy","pop","frontier","neighbors","backTrack","node","path","unshift","Maze","maze","HorizontalVerticalMaze","RandomMaze","getWallOrder","searched","gridWidth","gridHeight","addTopBottomSides","mazify","around","k","cur","newi","newj","isValid","lowWidth","highWidth","lowHeight","highHeight","mid","Math","floor","midHeight","topRandom","random","botRandom","curNode","nextToStartOrEnd","midWidth","chance","Square","props","state","row","col","handleDown","handleClick","handleMove","handleUp","classname","cls","id","String","className","onMouseDown","onMouseUp","onMouseMove","Component","MyNavbar","algo","runSelected","resetState","Navbar","bg","Nav","class","Dropdown","as","ButtonGroup","Button","Toggle","Menu","Item","onClick","variant","Legend","SubBanner","selected","begin","console","log","getText","GRID_HEIGHT","window","innerHeight","NAVBARSIZE","GRID_WIDTH","innerWidth","NODESIZE","ROWEND","COLEND","NODEROWSTART","NODECOLSTART","NODEROWEND","NODECOLEND","last_clicked_i","last_clicked_j","timeouts","onresize","location","reload","Board","fromWall","clearTimeout","document","getElementById","setState","strategy","searchOrder","graph","nodestart","nodeend","ROWS","COLS","seen","rows","cols","filler","generateNeeded","currow","curcol","near","newrow","newcol","sqrt","pow","runGraphType","animate","animateTimer","setTimeout","curSquare","animatePath","pathTimer","pathSquare","animateWall","wallSquare","downClick","updatedGrid","downClicked","getMaze","endclicked","makeGrid","map","square","rowkey","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0VA+EE,SAASA,EAAwBC,EAAMC,EAAUC,EAAQC,EAAGC,EAAGC,EAAcC,GAG3E,IAAMC,EAAMP,EAAKQ,QACXC,EAAUT,EAAKG,GAAGC,GACxB,GAAIC,EAAc,CAChB,IAAIK,EAAYV,EAAKC,EAAS,IAAIA,EAAS,IACrCU,EAAG,2BACJD,GADI,IAEPE,KAAM,KACNC,MAAM,EACNC,OAAO,IAEHC,EAAU,2BACXN,GADW,IAEdG,KAAM,KACNC,MAAM,EACNC,OAAO,IAETP,EAAIJ,GAAGC,GAAKW,EACZR,EAAIN,EAAS,IAAIA,EAAS,IAAMU,OAC3B,GAAIL,EAAW,CACpB,IAAIU,EAAUhB,EAAKE,EAAO,IAAIA,EAAO,IAC/BS,EAAG,2BACJK,GADI,IAEPJ,KAAM,KACNC,MAAM,EACNI,KAAK,IAEDF,EAAU,2BACXN,GADW,IAEdG,KAAM,KACNC,MAAM,EACNI,KAAK,IAEPV,EAAIJ,GAAGC,GAAKW,EACZR,EAAIL,EAAO,IAAIA,EAAO,IAAMS,MAEvB,CACL,IAAMI,EAAU,2BACXN,GADW,IAEdG,KAAM,KACNC,MAAOJ,EAAQI,OAEjBN,EAAIJ,GAAGC,GAAKW,EAEd,OAAOR,ECtHJ,IAAMW,EAAb,WACI,aAAe,oBACXC,KAAKC,KAAO,GAFpB,uCAKI,WACI,OAAID,KAAKE,SAAW,EAAYF,KAAKC,KAAKE,QACnC,OAPf,kBAUI,SAAKC,GACDJ,KAAKC,KAAKI,KAAKD,GACfJ,KAAKC,KAAKK,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,KAAOD,EAAEC,KAAQ,GAAK,OAZ1D,oBAeI,WACI,OAAOT,KAAKC,KAAKC,WAhBzB,KCAMQ,E,WACF,WAAYC,GAAO,oBAEXX,KAAKY,EADI,QAATD,EACS,IAAIE,EACG,QAATF,EACE,IAAIG,EACG,UAATH,EACE,IAAII,EAEJ,K,uCAIjB,WACI,OAAOf,KAAKY,EAAEI,Q,kBAGlB,SAAKZ,GACDJ,KAAKY,EAAEP,KAAKD,K,oBAGhB,WACI,OAAOJ,KAAKY,EAAEV,a,KAIhBY,E,WACF,aAAe,oBACXd,KAAKiB,SAAW,G,uCAGpB,WACI,OAAIjB,KAAKE,SAAW,EAAWF,KAAKiB,SAASD,MACtC,O,kBAGX,SAAKZ,GACD,OAAOJ,KAAKiB,SAASZ,KAAKD,K,oBAG9B,WACI,OAAOJ,KAAKiB,SAASf,W,KAIvBW,E,WACF,aAAe,oBACXb,KAAKiB,SAAW,G,uCAGpB,WACI,OAAIjB,KAAKE,SAAW,EAAWF,KAAKiB,SAASd,QACtC,O,kBAGX,SAAKC,GACDJ,KAAKiB,SAASZ,KAAKD,K,oBAGvB,WACI,OAAOJ,KAAKiB,SAASf,W,KAIvBa,E,WACF,aAAe,oBACXf,KAAKiB,SAAW,IAAIlB,E,uCAGxB,WACI,OAAIC,KAAKE,SAAW,EAAWF,KAAKiB,SAASD,MACtC,O,kBAGX,SAAKZ,GACDJ,KAAKiB,SAASZ,KAAKD,K,oBAGvB,WACI,OAAOJ,KAAKiB,SAASf,a,KCnFvBgB,EAAY,CAAC,EAAE,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAE,GAAI,CAAC,GAAG,IA0D/C,SAASC,EAAUC,GAEf,IAAMC,EAAO,GAEb,IADAD,EAAOA,EAAK3B,KACS,OAAd2B,EAAK3B,MACR4B,EAAKC,QAAQF,GACbA,EAAOA,EAAK3B,KAEhB,OAAO4B,E,ICrELE,E,WAEF,WAAY1C,EAAM8B,GAAO,oBACrBX,KAAKwB,KAAO,KAERxB,KAAKwB,KADI,eAATb,GAAkC,aAATA,EACb,IAAIc,EAAuB5C,EAAM8B,GAEjC,IAAIe,EAAW7C,G,2CAInC,WACI,OAAOmB,KAAKwB,KAAKG,mB,KAOnBF,E,WACF,WAAY5C,EAAM8B,GAAO,oBACrBX,KAAK4B,SAAW,GAChB5B,KAAKnB,KAAOA,EAAKQ,QACjBW,KAAK6B,UAAYhD,EAAK,GAAGqB,OACzBF,KAAK8B,WAAajD,EAAKqB,OACvBF,KAAK+B,oBACL/B,KAAKgC,OAAO,EAAGhC,KAAK6B,UAAU,EAAG,EAAI7B,KAAK8B,WAAW,EAAGnB,G,gDAG5D,WACI,OAAOX,KAAK4B,W,+BAIhB,WACI,IAAI,IAAI5C,EAAI,EAAGA,EAAIgB,KAAK6B,UAAW7C,IAC/BgB,KAAK4B,SAASvB,KAAKL,KAAKnB,KAAK,GAAGG,IAChCgB,KAAK4B,SAASvB,KAAKL,KAAKnB,KAAKmB,KAAK8B,WAAW,GAAG9C,IAEpD,IAAI,IAAIA,EAAI,EAAGA,EAAIgB,KAAK8B,WAAY9C,IAChCgB,KAAK4B,SAASvB,KAAKL,KAAKnB,KAAKG,GAAG,IAChCgB,KAAK4B,SAASvB,KAAKL,KAAKnB,KAAKG,GAAGgB,KAAK6B,UAAY,M,qBAIzD,SAAQ7C,EAAGC,GACP,OAAOD,GAAK,GAAKA,EAAIgB,KAAK6B,WAAa5C,GAAK,GAAKA,EAAIe,KAAK8B,a,8BAG9D,SAAiB9C,EAAGC,GAEhB,IADA,IAAIgD,EAAS,CAAC,CAAC,EAAG,GAAI,CAAC,GAAG,GAAI,CAAC,EAAG,GAAI,EAAE,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,EAAE,GAAI,GAAI,EAAE,EAAG,IACvEC,EAAI,EAAGA,EAAID,EAAO/B,OAAQgC,IAAK,CACnC,IAAIC,EAAMF,EAAOC,GACbE,EAAOpD,EAAImD,EAAI,GACfE,EAAOpD,EAAIkD,EAAI,GACnB,GAAGnC,KAAKsC,QAAQF,EAAMC,IAASrC,KAAKnB,KAAKuD,GAAMC,GAAM1C,OAASK,KAAKnB,KAAKuD,GAAMC,GAAMvC,IAChF,OAAO,EAGf,OAAO,I,oBAKX,SAAOyC,EAAUC,EAAWC,EAAWC,EAAY/B,GAC/C,GAAa,aAATA,EAAqB,CACrB,IAAIgC,EAAMC,KAAKC,OAAON,EAAWC,GAAW,GAC5C,GAAKA,EAAYD,EAAY,EAAG,CAM5B,IAJA,IAAIO,EAAYF,KAAKC,OAAOJ,EAAUC,GAAY,GAC9CK,EAAYH,KAAKC,MAAMD,KAAKI,UAAYF,EAAYL,IAAcA,EAClEQ,EAAYL,KAAKC,MAAMD,KAAKI,UAAYN,EAAaI,IAAcA,EAE/D9D,EAAIyD,EAAWzD,EAAI0D,EAAY1D,IAAK,CACxC,IAAIkE,EAAUlD,KAAKnB,KAAKG,GAAG2D,GACvBO,EAAQvD,OAAUuD,EAAQpD,KAAOd,GAAK+D,GAAa/D,GAAKiE,GAAcjD,KAAKmD,iBAAiBnE,EAAG2D,IAC/F3C,KAAK4B,SAASvB,KAAK6C,GAI3BlD,KAAKgC,OAAOO,EAAUI,EAAKF,EAAWC,EAAY,cAClD1C,KAAKgC,OAAOW,EAAI,EAAGH,EAAWC,EAAWC,EAAY,eAM7D,GAAa,eAAT/B,EAAuB,CACvB,IAAIgC,EAAMC,KAAKC,OAAOJ,EAAYC,GAAY,GAC9C,GAAIA,EAAaD,EAAa,EAAG,CAM7B,IAJA,IAAIW,EAAWR,KAAKC,OAAON,EAASC,GAAW,GAC3CO,EAAYH,KAAKC,MAAMD,KAAKI,UAAYI,EAAWb,IAAaA,EAChEU,EAAYL,KAAKC,MAAMD,KAAKI,UAAYR,EAAYY,IAAaA,EAE7DpE,EAAIuD,EAAUvD,EAAIwD,EAAWxD,IAAK,CACtC,IAAIkE,EAAUlD,KAAKnB,KAAK8D,GAAK3D,GACzBkE,EAAQvD,OAAUuD,EAAQpD,KAAOd,GAAK+D,GAAa/D,GAAKiE,GAAcjD,KAAKmD,iBAAiBR,EAAK3D,IACjGgB,KAAK4B,SAASvB,KAAK6C,GAI3BlD,KAAKgC,OAAOO,EAAUC,EAAWC,EAAWE,EAAK,YACjD3C,KAAKgC,OAAOO,EAAUC,EAAWG,EAAI,EAAGD,EAAY,kB,KAQ9DhB,E,WAEF,WAAY7C,GAAO,oBACfmB,KAAK4B,SAAW,GAChB5B,KAAKnB,KAAOA,EAAKQ,QACjBW,KAAK6B,UAAYhD,EAAK,GAAGqB,OACzBF,KAAK8B,WAAajD,EAAKqB,OACvBF,KAAK+B,oBACL/B,KAAKgC,OAAO,EAAGhC,KAAK6B,UAAU,EAAG,EAAI7B,KAAK8B,WAAW,EAAG,c,gDAG5D,WACI,OAAO9B,KAAK4B,W,qBAGhB,SAAQ5C,EAAGC,GACP,OAAOD,GAAK,GAAKA,EAAIgB,KAAK6B,WAAa5C,GAAK,GAAKA,EAAIe,KAAK8B,a,8BAG9D,SAAiB9C,EAAGC,GAEhB,IADA,IAAIgD,EAAS,CAAC,CAAC,EAAG,GAAI,CAAC,GAAG,GAAI,CAAC,EAAG,GAAI,EAAE,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,EAAE,GAAI,GAAI,EAAE,EAAG,IACvEC,EAAI,EAAGA,EAAID,EAAO/B,OAAQgC,IAAK,CACnC,IAAIC,EAAMF,EAAOC,GACbE,EAAOpD,EAAImD,EAAI,GACfE,EAAOpD,EAAIkD,EAAI,GACnB,GAAGnC,KAAKsC,QAAQF,EAAMC,IAASrC,KAAKnB,KAAKuD,GAAMC,GAAM1C,OAASK,KAAKnB,KAAKuD,GAAMC,GAAMvC,IAChF,OAAO,EAGf,OAAO,I,+BAGX,WACI,IAAI,IAAId,EAAI,EAAGA,EAAIgB,KAAK6B,UAAW7C,IAC/BgB,KAAK4B,SAASvB,KAAKL,KAAKnB,KAAK,GAAGG,IAChCgB,KAAK4B,SAASvB,KAAKL,KAAKnB,KAAKmB,KAAK8B,WAAW,GAAG9C,IAEpD,IAAI,IAAIA,EAAI,EAAGA,EAAIgB,KAAK8B,WAAY9C,IAChCgB,KAAK4B,SAASvB,KAAKL,KAAKnB,KAAKG,GAAG,IAChCgB,KAAK4B,SAASvB,KAAKL,KAAKnB,KAAKG,GAAGgB,KAAK6B,UAAY,M,oBAIzD,SAAOU,EAAUC,EAAWC,EAAWC,EAAY/B,GAC/C,GAAa,aAATA,EAAqB,CACrB,IAAIgC,EAAMC,KAAKC,OAAON,EAAWC,GAAW,GAC5C,GAAKA,EAAYD,EAAY,EAAG,CAC5B,IAAI,IAAIvD,EAAIyD,EAAWzD,EAAI0D,EAAY1D,IAAK,CACxC,IAAIkE,EAAUlD,KAAKnB,KAAKG,GAAG2D,GACvBU,EAAST,KAAKI,UACdE,EAAQvD,QAAUuD,EAAQpD,KAAOuD,GAAU,MAAQrD,KAAKmD,iBAAiBnE,EAAG2D,IAC5E3C,KAAK4B,SAASvB,KAAK6C,GAG3BlD,KAAKgC,OAAOO,EAAUI,EAAKF,EAAWC,EAAY,cAClD1C,KAAKgC,OAAOW,EAAI,EAAGH,EAAWC,EAAWC,EAAY,eAK7D,GAAa,eAAT/B,EAAuB,CACvB,IAAIgC,EAAMC,KAAKC,OAAOJ,EAAYC,GAAY,GAC9C,GAAIA,EAAaD,EAAa,EAAG,CAC7B,IAAI,IAAIzD,EAAIuD,EAAUvD,EAAIwD,EAAWxD,IAAK,CACtC,IAAIkE,EAAUlD,KAAKnB,KAAK8D,GAAK3D,GACzBqE,EAAST,KAAKI,UACdE,EAAQvD,QAAUuD,EAAQpD,KAAOuD,EAAS,MAAQrD,KAAKmD,iBAAiBR,EAAK3D,IAC7EgB,KAAK4B,SAASvB,KAAK6C,GAG3BlD,KAAKgC,OAAOO,EAAUC,EAAWC,EAAWE,EAAK,YACjD3C,KAAKgC,OAAOO,EAAUC,EAAWG,EAAI,EAAGD,EAAY,kB,YCnL/CY,E,kDACjB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,IAAKF,EAAME,IACXC,IAAKH,EAAMG,IACX/D,MAAO4D,EAAM5D,MACbG,IAAKyD,EAAMzD,IACXJ,KAAM6D,EAAM7D,KACZiE,WAAYJ,EAAMK,YAClBC,WAAYN,EAAMM,WAClBC,SAAUP,EAAMO,UAVD,E,0CAenB,WAAU,IAAD,OACHC,EAAY,GACZC,EAAM,GAWV,OAVIhE,KAAKuD,MAAM5D,OACboE,EAAY,gBACZC,EAAM,mCACGhE,KAAKuD,MAAMzD,KACpBiE,EAAY,cACZC,EAAM,4BACGhE,KAAKuD,MAAM7D,OACpBqE,EAAY,gBAIV,qBAAKE,GAAIC,OAAOlE,KAAKuD,MAAME,KAAO,IAAMS,OAAOlE,KAAKuD,MAAMG,KAAMS,UAAW,SAAWJ,EAAWK,YAAa,kBAAM,EAAKb,MAAMI,WAAW,EAAKJ,MAAME,IAAK,EAAKF,MAAMG,MAAMW,UAAW,kBAAM,EAAKd,MAAMO,YAAYQ,YAAa,kBAAM,EAAKf,MAAMM,WAAW,EAAKN,MAAME,IAAK,EAAKF,MAAMG,MAAvR,SACE,qBAAKS,UAAWH,U,GA/BQO,a,2CCKfC,E,kDACjB,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXiB,KAAMlB,EAAMkB,KACZC,YAAanB,EAAMmB,YACnBC,WAAYpB,EAAMoB,WAClB3C,OAAQuB,EAAMvB,QANC,E,0CAUnB,WAAW,IAAD,OACR,OAEA,eAAC4C,EAAA,EAAD,CAAQC,GAAG,OAAX,UACE,qBAAKV,UAAU,sBAAf,uBAEA,eAACW,EAAA,EAAD,CAAKC,MAAM,kBAAX,UAEE,eAACC,EAAA,EAAD,CAAUC,GAAIC,IAAd,UAEE,cAACC,EAAA,EAAD,CAAQhB,UAAU,eAAlB,kCAEA,cAACa,EAAA,EAASI,OAAV,CAAiBjB,UAAU,eAAgBF,GAAG,yBAE9C,eAACe,EAAA,EAASK,KAAV,WACE,cAACL,EAAA,EAASM,KAAV,CAAeC,QAAS,kBAAM,EAAK/B,MAAMmB,WAAW,OAAO,IAA3D,kCACA,cAACK,EAAA,EAASM,KAAV,CAAeC,QAAS,kBAAM,EAAK/B,MAAMmB,WAAW,OAAO,IAA3D,gCACA,cAACK,EAAA,EAASM,KAAV,CAAeC,QAAS,kBAAM,EAAK/B,MAAMmB,WAAW,SAAS,IAA7D,iCAMJ,eAACK,EAAA,EAAD,CAAUD,MAAM,WAAWE,GAAIC,IAA/B,UAEE,cAACC,EAAA,EAAD,CAAQhB,UAAU,eAAeqB,QAAQ,UAAzC,wBAEA,cAACR,EAAA,EAASI,OAAV,CAAiBjB,UAAU,eAAgBF,GAAG,yBAE/C,eAACe,EAAA,EAASK,KAAV,WACG,cAACL,EAAA,EAASM,KAAV,CAAeC,QAAS,kBAAM,EAAK/B,MAAMxB,OAAO,aAAhD,4BACA,cAACgD,EAAA,EAASM,KAAV,CAAeC,QAAS,kBAAM,EAAK/B,MAAMxB,OAAO,eAAhD,8BACA,cAACgD,EAAA,EAASM,KAAV,CAAeC,QAAS,kBAAM,EAAK/B,MAAMxB,OAAO,WAAhD,+BAMF,cAACmD,EAAA,EAAD,CAAQhB,UAAU,kBAAkBF,GAAG,WAAWsB,QAAS,kBAAM,EAAKhC,MAAMmB,eAA5E,qBAEA,cAACS,EAAA,EAAD,CAAQhB,UAAU,iBAAiBoB,QAAS,kBAAM,EAAK/B,MAAMmB,WAAW,EAAKnB,MAAMiB,MAAM,IAAzF,6B,GAnD0BF,aCJjBkB,G,gEACjB,WAAYlC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,GAFC,E,0CAOlB,WACI,OACI,gCACI,uBACA,qBAAIuB,MAAM,KAAV,UACI,+BACI,qBAAKZ,UAAU,0CACf,uBACA,gDAIJ,+BACI,qBAAKA,UAAU,iCACf,uBACA,8CAIJ,+BACI,qBAAKA,UAAU,mBACf,uBACA,0CAIJ,+BACI,qBAAKA,UAAU,yCACf,uBACA,oD,GArCYI,cCAfmB,G,yDACjB,WAAYnC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTmC,SAAUpC,EAAMoC,UAHL,E,2CAOnB,WACI,IAAIC,EAAQ,gBAEZ,OADAC,QAAQC,IAAI9F,KAAKuD,MAAMoC,UACG,OAAvB3F,KAAKuD,MAAMoC,SACHC,EAAQ,wBACc,OAAvB5F,KAAKuD,MAAMoC,SACVC,EAAQ,qBACc,SAAvB5F,KAAKuD,MAAMoC,SACVC,EAAQ,iBAERA,EAAQ,0B,oBAIvB,WACI,OACI,gCACI,qBAAKb,MAAM,YAAX,SAAwB/E,KAAK+F,YAC7B,8BACI,cAAC,EAAD,a,GA3BmBxB,cCUjCyB,EAAcpD,KAAKC,OAAQoD,OAAOC,YAJvB,GAIgDC,IAH9C,IADF,IAKXC,EAAaxD,KAAKC,OAAOoD,OAAOI,WAAWC,IALhC,IAMXC,EAASP,EACTQ,EAASJ,EAEXK,EAAe7D,KAAKC,MAAMmD,EAAc,GACxCU,EAAe9D,KAAKC,MAAMuD,EAAa,EAAI,GAC3CO,EAAaF,EACbG,EAA4B,EAAfF,EAEbG,GAAkB,EAClBC,GAAkB,EAElBC,EAAW,GAEfd,OAAOe,SAAW,WAAQf,OAAOgB,SAASC,U,IAErBC,E,kDACjB,aAAe,IAAD,8BACZ,gBA0BFxC,WAAa,SAACF,EAAM2C,GAClB,GAAIL,EAAS7G,OAAS,EAAG,CAEvB,IAAI,IAAIlB,EAAI,EAAGA,EAAI+H,EAAS7G,OAAQlB,IAClCqI,aAAaN,EAAS/H,IAExB+H,EAAW,GAEb,IAAI,IAAI/H,EAAI,EAAGA,EAAIuH,EAAQvH,IACzB,IAAI,IAAIC,EAAI,EAAGA,EAAIuH,EAAQvH,IACzB,KAAID,IAAMyH,GAAgBxH,IAAMyH,GAAgB1H,IAAM2H,GAAc1H,IAAM2H,GAA1E,CAGA,IAAM3C,EAAKC,OAAOlF,GAAK,IAAMkF,OAAOjF,GACjCmI,IACD,EAAK5D,MAAM3E,KAAKG,GAAGC,GAAGS,MAAO,GAE1B,EAAK8D,MAAM3E,KAAKG,GAAGC,GAAGS,OACzB4H,SAASC,eAAetD,GAAIE,UAAY,UAI9C,EAAKqD,SAAS,CACZC,SAAUhD,KAlDA,EAyDdC,YAAc,WACZ,EAAKC,WAAW,EAAKnB,MAAMiE,UAAU,GACrC,IAAMC,EN/EZ,SAAsBC,EAAOhH,EAAMiH,EAAWC,GAC1C,IAAM5G,EAAW,IAAIP,EAAeC,GAE9BmH,EAAOH,EAAMzH,OACb6H,EAAOJ,EAAM,GAAGzH,OAEhB8H,EHbV,SAAwBC,EAAMC,EAAMC,GAGhC,IADA,IAAIH,EAAO,GACFhJ,EAAI,EAAGA,EAAIiJ,EAAMjJ,IAAK,CAE3B,IADA,IAAIyE,EAAM,GACFxE,EAAI,EAAGA,EAAIiJ,EAAMjJ,IACrBwE,EAAIpD,KAAK8H,GAEbH,EAAK3H,KAAKoD,GAEd,OAAOuE,EGGMI,CAAeN,EAAMC,GAAM,GAExC9G,EAASZ,KAAKsH,EAAMC,EAAU,IAAIA,EAAU,KAC5CI,EAAKJ,EAAU,IAAIA,EAAU,KAAM,EAEnC,IHYiBrH,EAAGC,EAVPxB,EAAGC,EGFV2C,EAAW,GAKjB,IAFAA,EAASvB,KAAKsH,EAAMC,EAAU,IAAIA,EAAU,KAErC3G,EAASf,SAAW,GAAG,CAC1B,IAAMiC,EAAMlB,EAASD,MACfqH,EAASlG,EAAInD,EACbsJ,EAASnG,EAAIlD,EAEnB,GADA2C,EAASvB,KAAKsH,EAAMU,GAAQC,IACxBD,GAAUR,EAAQ,IAAMS,GAAUT,EAAQ,GAE1C,MAAO,CAACjG,EADQT,EAAUgB,IAG9B,IAAK,IAAIoG,EAAM,EAAGA,EAAOrH,EAAUhB,OAAQqI,IAAQ,CAE/C,IAAMC,EAASH,EAASnH,EAAUqH,GAAM,GAClCE,EAASH,EAASpH,EAAUqH,GAAM,GHfhCtJ,EGiBYwJ,GHjBfzJ,EGiBOwJ,IHfR,GAAKxJ,EGemB8I,GHfP7I,GAAK,GAAKA,EGeG8I,IAAUC,EAAKQ,GAAQC,KAAYd,EAAMa,GAAQC,GAAQ/I,OACvFsI,EAAKQ,GAAQC,IAAU,EACvBd,EAAMa,GAAQC,GAAQhI,MHTjBF,EGSoCoH,EAAMa,GAAQC,GHT/CjI,EGSwDmH,EAAME,EAAQ,IAAIA,EAAQ,IHPjGjF,KAAK8F,KAAK9F,KAAK+F,IAAIpI,EAAEvB,EAAIwB,EAAExB,EAAG,GAAK4D,KAAK+F,IAAIpI,EAAEtB,EAAIuB,EAAEvB,EAAG,KGQhDgC,EAASZ,KAAKsH,EAAMa,GAAQC,IAC5Bd,EAAMa,GAAQC,GAAQhJ,KAAO0C,IAOzC,MAAO,CAACP,EA7BK,IMmESgH,CAAa,EAAKpF,MAAM3E,KAAM,EAAK2E,MAAMiE,SAAU,CAAChB,EAAcC,GAAe,CAACC,EAAYC,IAClH,EAAKiC,QAAQnB,EAAY,GAAIA,EAAY,KA5D7B,EA+DdmB,QAAU,SAACnB,EAAarG,GACtB,IADgC,IAAD,WACtBrC,GACP,IAAI8J,EAAeC,YAAW,WAC5B,IAAMC,EAAYtB,EAAY1I,GAK9B,GAJIgK,EAAUlJ,KACV,EAAKmJ,YAAY5H,IAGhB2H,EAAUrJ,QAAUqJ,EAAUlJ,IAAK,CACtC,IAAMmE,EAAKC,OAAO8E,EAAUhK,GAAK,IAAMkF,OAAO8E,EAAU/J,GACxDqI,SAASC,eAAetD,GAAIE,UAAY,wBAEzC,GAAKnF,GACR+H,EAAS1G,KAAKyI,IAZP9J,EAAI,EAAGA,EAAI0I,EAAYxH,OAAQlB,IAAM,EAArCA,IAhEG,EAgFdiK,YAAc,SAAC5H,GACb,IADuB,IAAD,WACbpC,GACP,IAAIiK,EAAYH,YAAW,WACzB,IAAMI,EAAa9H,EAAKpC,GAClBgF,EAAKC,OAAOiF,EAAWnK,GAAK,IAAMkF,OAAOiF,EAAWlK,GAC1DqI,SAASC,eAAetD,GAAIE,UAAY,uDACvC,GAAKlF,GACR8H,EAAS1G,KAAK6I,IANPjK,EAAI,EAAGA,EAAIoC,EAAKnB,OAAQjB,IAAM,EAA9BA,IAjFG,EA2FdmK,YAAc,SAAC1J,GACb,IADuB,IAAD,WACbT,GACP,IAAIiK,EAAYH,YAAW,WACzB,IAAMM,EAAa3J,EAAKT,GACxBoK,EAAW3J,MAAO,EAClB,IAAMuE,EAAKC,OAAOmF,EAAWrK,GAAK,IAAMkF,OAAOmF,EAAWpK,GAC1DqI,SAASC,eAAetD,GAAIE,UAAY,uBACvC,GAAKlF,GACR8H,EAAS1G,KAAK6I,IAPPjK,EAAI,EAAGA,EAAIS,EAAKQ,OAAQjB,IAAM,EAA9BA,IA5FG,EAuGd0E,WAAa,SAAC3E,EAAGC,GACf,GAAID,IAAMyH,GAAgBxH,IAAMyH,EAC9B,EAAK/B,WAAW,EAAKnB,MAAMiE,UAAU,GACrC,EAAKD,SAAS,CACZ8B,WAAW,EACXpK,cAAc,SAEX,GAAIF,IAAM2H,GAAc1H,IAAM2H,EACnC,EAAKjC,WAAW,EAAKnB,MAAMiE,UAAU,GACrC,EAAKD,SAAS,CACZ8B,WAAW,EACXnK,YAAY,QAGT,CACH,IAAMoK,EAAc3K,EAAwB,EAAK4E,MAAM3E,KAAM,CAAC4H,EAAcC,GAAe,CAACC,EAAYC,GAAa5H,EAAGC,EAAG,EAAKuE,MAAMtE,aAAc,EAAKsE,MAAMrE,YAC/J0H,EAAiB7H,EACjB8H,EAAiB7H,EACjB,EAAKuI,SAAS,CACZ3I,KAAM0K,EACND,WAAW,MA3HL,EAiIdzF,WAAa,SAAC7E,EAAGC,GAEf,IAAMuK,EAAc,EAAKhG,MAAM8F,UACzBpK,EAAe,EAAKsE,MAAMtE,aAC1BC,EAAa,EAAKqE,MAAMrE,WAC9B,GAAIqK,GAAetK,GACjB,GAAKF,IAAMyH,GAAgBxH,IAAMyH,EAAe,CAC9C,IAAM6C,EAAc3K,EAAwB,EAAK4E,MAAM3E,KAAM,CAAC4H,EAAcC,GAAe,CAACC,EAAYC,GAAa5H,EAAGC,EAAGC,EAAcC,GACzIsH,EAAezH,EACf0H,EAAezH,EACf,EAAKuI,SAAS,CACZ3I,KAAM0K,UAIL,GAAIC,GAAerK,GACtB,GAAKH,IAAM2H,GAAc1H,IAAM2H,EAAY,CACzC,IAAM2C,EAAc3K,EAAwB,EAAK4E,MAAM3E,KAAM,CAAC4H,EAAcC,GAAe,CAACC,EAAYC,GAAa5H,EAAGC,EAAGC,EAAcC,GACzIwH,EAAa3H,EACb4H,EAAa3H,EACb,EAAKuI,SAAS,CACZ3I,KAAM0K,UAGP,GAAIC,IAAiBxK,GAAK6H,GAAkBC,GAAkB7H,GAAI,CACvE,IAAMsK,EAAc3K,EAAwB,EAAK4E,MAAM3E,KAAM,CAAC4H,EAAcC,GAAe,CAACC,EAAYC,GAAa5H,EAAGC,EAAGC,EAAcC,GACzI0H,EAAiB7H,EACjB8H,EAAiB7H,EACjB,EAAKuI,SAAS,CACZ3I,KAAM0K,MA9JE,EAmKdzF,SAAW,WAET,EAAK0D,SAAS,CACZ8B,WAAW,EACXpK,cAAc,EACdC,YAAY,EACZsI,SAAU,EAAKjE,MAAMiE,YAzKX,EA6KdzF,OAAS,SAACrB,GACR,EAAKgE,WAAW,EAAKnB,MAAMiE,UAAU,GACrC,IAAIjG,EAAO,IAAID,EAAK,EAAKiC,MAAM3E,KAAM8B,GACrC,EAAKyI,YAAY5H,EAAKiI,YA9KtB,EAAKjG,MAAQ,CACX3E,KAAM,GACNyK,WAAW,EACXpK,cAAc,EACdwK,YAAY,EACZjC,SAAU,OAPA,E,qDAWd,WACE,IAAM5I,ETKZ,SAAkB0H,EAAQC,EAAQC,EAAcC,EAAcC,EAAYC,GAItE,IADA,IAAIqB,EAAO,GACHjJ,EAAI,EAAGA,EAAIuH,EAAQvH,IAAK,CAE9B,IADA,IAAIkJ,EAAO,GACFjJ,EAAI,EAAGA,EAAIuH,EAAQvH,IACtBD,IAAMyH,GAAgBxH,IAAMyH,EAC9BwB,EAAK7H,KAAK,CAACrB,EAAGA,EAAGC,EAAGA,EAAGU,OAAO,EAAMG,KAAK,EAAOJ,MAAM,EAAOD,KAAM,KAAMgB,KAAM,IACtEzB,IAAM2H,GAAc1H,IAAM2H,EACnCsB,EAAK7H,KAAK,CAACrB,EAAGA,EAAGC,EAAGA,EAAGU,OAAO,EAAOG,KAAK,EAAMJ,MAAM,EAAOD,KAAM,KAAMgB,KAAM,IAE/EyH,EAAK7H,KAAK,CAACrB,EAAGA,EAAGC,EAAGA,EAAGU,OAAO,EAAOG,KAAK,EAAOJ,MAAM,EAAOD,KAAM,KAAMgB,KAAM,IAGpFwH,EAAK5H,KAAK6H,GAEZ,OAAOD,EStBQ0B,CAASpD,EAAQC,EAAQC,EAAcC,EAAcC,EAAYC,GAC9E5G,KAAKwH,SAAS,CACZ3I,KAAMA,M,kCAIV,WACE,GAAIkI,EAAS7G,OAAS,EACpB,IAAK,IAAIlB,EAAI,EAAGA,EAAI+H,EAAS7G,OAAQlB,IACnCqI,aAAaN,EAAS/H,IAG1B+H,EAAW,K,oBA2Jb,WAAU,IAAD,OAEP,OACE,gCACC,cAAC,EAAD,CAAUtC,KAAMzE,KAAKwD,MAAMiE,SAAU/C,YAAa1E,KAAK0E,YAAaC,WAAY3E,KAAK2E,WAAY3C,OAAQhC,KAAKgC,SAC7G,cAAC,EAAD,CAAW2D,SAAU3F,KAAKwD,MAAMiE,WAChC,qBAAKtD,UAAU,UAAf,SACGnE,KAAKwD,MAAM3E,KAAK+K,KAAI,SAACnG,EAAKQ,GACzB,OACE,8BACGR,EAAImG,KAAI,SAACC,EAAQC,GAAY,IACrB9K,EAA0B6K,EAA1B7K,EAAGC,EAAuB4K,EAAvB5K,EAAGU,EAAoBkK,EAApBlK,MAAOD,EAAamK,EAAbnK,KAAMI,EAAO+J,EAAP/J,IAC1B,OACE,cAAC,EAAD,CAEE2D,IAAKzE,EACLc,IAAKA,EACLJ,KAAMA,EACNC,MAAOA,EACP+D,IAAKzE,EACL0E,WAAa,EAAKA,WAClBE,WAAc,EAAKA,WACnBC,SAAY,EAAKA,UARZgG,OALH7F,e,GA7LSM,a,OChBpBwF,MARf,WACE,OACE,qBAAK5F,UAAU,MAAf,SACE,cAAC,EAAD,OCES6F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrD,SAASC,eAAe,SAM1ByC,M","file":"static/js/main.47462d54.chunk.js","sourcesContent":["/** \r\n * @param {Integer} rows The number of rows for the 2darray.\r\n * @param {Integer} cols The number of columns for the 2darray.\r\n * @param {Object} filler default value to fill the array with.\r\n*/\r\nfunction generateNeeded(rows, cols, filler) {\r\n    //Generates the 2darray of size (rows, columns) filled with filler.\r\n    let seen = [];\r\n    for (var i = 0; i < rows; i++) {\r\n        let row = [];\r\n        for(var j = 0; j < cols; j++) {\r\n            row.push(filler);\r\n        }\r\n        seen.push(row);\r\n    }\r\n    return seen;\r\n}\r\n\r\n/**\r\n * \r\n * @param {Integer} i The current row value\r\n * @param {Integer} j The current column value\r\n * @param {Integer} rows The Maximum row vavlue\r\n * @param {Integer} cols The Maximum column value\r\n */\r\nfunction isValid(i, j, rows, cols) { \r\n    // Determins if the value[i][j] is within the 2d array\r\n    return i >= 0 && i < rows && j >= 0 && j < cols;\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} a A Node with i, j attributes \r\n * @param {Object} b A Node with i, j attributes\r\n */\r\nfunction getDistance(a, b) {\r\n  // Computes the distance between Object a adn b.\r\n  return Math.sqrt(Math.pow(a.i - b.i, 2) + Math.pow(a.j - b.j, 2))\r\n}\r\n\r\n/**\r\n * \r\n * @param {Integer} ROWEND The size of the Rows for the grid.\r\n * @param {Integer} COLEND The size of Columns for the grid.\r\n * @param {Integer} NODEROWSTART The row of the starting node.\r\n * @param {Integer} NODECOLSTART The column of the starting node.\r\n * @param {Integer} NODEROWEND The row of the ending node.\r\n * @param {Integer} NODECOLEND The column of the ending node.\r\n */\r\nfunction makeGrid(ROWEND, COLEND, NODEROWSTART, NODECOLSTART, NODEROWEND, NODECOLEND) {\r\n    //Generates a 2d grid of Objects (Nodes) and assigns the start and end nodes to the appropriate\r\n    //indeces.\r\n    let rows = [];\r\n    for(let i = 0; i < ROWEND; i++ ){\r\n      let cols = [];\r\n      for (let j = 0; j < COLEND; j++) {\r\n        if (i === NODEROWSTART && j === NODECOLSTART){\r\n          cols.push({i: i, j: j, start: true, end: false, wall: false, from: null, dist: 0});\r\n        } else if (i === NODEROWEND && j === NODECOLEND) {\r\n          cols.push({i: i, j: j, start: false, end: true, wall: false, from: null, dist: 0});\r\n        } else {\r\n          cols.push({i: i, j: j, start: false, end: false, wall: false, from: null, dist: 0});\r\n        }\r\n      }\r\n      rows.push(cols)\r\n    }\r\n    return rows\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {2dArray of Objects (Nodes)} grid \r\n   * @param {Array of Integer} oldstart \r\n   * @param {Array of Integer} oldend \r\n   * @param {Integer} i \r\n   * @param {Integer} j \r\n   * @param {Integer} startClicked \r\n   * @param {Integer} endClicked \r\n   */\r\n  function generateGridWithNewNode(grid, oldstart, oldend, i, j, startClicked, endClicked) {\r\n    // This function swaps out old start Node with the new start Node or the old end Node\r\n    // with the new end node.\r\n    const out = grid.slice();\r\n    const newnode = grid[i][j]\r\n    if (startClicked) {\r\n      let startNode = grid[oldstart[0]][oldstart[1]]\r\n      const old = {\r\n        ...startNode,\r\n        from: null,\r\n        wall: false,\r\n        start: false,\r\n      };\r\n      const updateNode = {\r\n        ...newnode,\r\n        from: null, \r\n        wall: false,\r\n        start: true,\r\n      };\r\n      out[i][j] = updateNode;\r\n      out[oldstart[0]][oldstart[1]] = old;\r\n    } else if (endClicked){\r\n      let endNode = grid[oldend[0]][oldend[1]]\r\n      const old = {\r\n        ...endNode,\r\n        from: null,\r\n        wall: false,\r\n        end: false,\r\n      };\r\n      const updateNode = {\r\n        ...newnode,\r\n        from: null, \r\n        wall: false,\r\n        end: true,\r\n      };\r\n      out[i][j] = updateNode;\r\n      out[oldend[0]][oldend[1]] = old;\r\n  \r\n    } else {\r\n      const updateNode = {\r\n        ...newnode,\r\n        from: null, \r\n        wall: !newnode.wall,\r\n      };\r\n      out[i][j] = updateNode;\r\n    }\r\n    return out\r\n  }\r\n\r\nexport {isValid, generateNeeded, makeGrid, getDistance, generateGridWithNewNode}","//NOTE: \r\n//this is a terrible implementation of a minheap. \r\n//It was implementnted this way for quickly testing..\r\n\r\n/**\r\n * Poor implentation of a minHeap\r\n */\r\nexport class minHeap {\r\n    constructor() {\r\n        this.head = []\r\n    }\r\n\r\n    pop() {\r\n        if (this.length() > 0 ) {return this.head.shift();}\r\n        return null\r\n    }\r\n\r\n    push(item) {\r\n        this.head.push(item);\r\n        this.head.sort((a, b) => (a.dist > b.dist) ? 1 : -1);\r\n    }\r\n\r\n    length() {\r\n        return this.head.length;\r\n    }\r\n\r\n}","import {minHeap} from './Minheap';\r\n\r\n/**\r\n * Acts as a strtagey pattern implementaton of a Data structure implementation\r\n *  for the graph algorithms.\r\n */\r\n\r\nclass SearchStrategy {\r\n    constructor(type) {\r\n        if (type === \"BFS\") {\r\n            this.g = new BfsStrategy();\r\n        } else if (type === \"DFS\") {\r\n            this.g = new DfsStrategy();\r\n        } else if (type === \"ASTAR\") {\r\n            this.g = new AstarStrategy();\r\n        } else {\r\n            this.g = null\r\n        }\r\n    }\r\n\r\n    pop() {\r\n        return this.g.pop();\r\n    }\r\n\r\n    push(item) {\r\n        this.g.push(item);\r\n    }\r\n\r\n    length() {\r\n        return this.g.length();\r\n    }\r\n}\r\n\r\nclass DfsStrategy {\r\n    constructor() {\r\n        this.frontier = []\r\n    }\r\n\r\n    pop() {\r\n        if (this.length() > 0) {return this.frontier.pop();}\r\n        return null;\r\n    }\r\n\r\n    push(item) {\r\n        return this.frontier.push(item)\r\n    }\r\n\r\n    length() {\r\n        return this.frontier.length;\r\n    }\r\n}\r\n\r\nclass BfsStrategy {\r\n    constructor() {\r\n        this.frontier = [];\r\n    }\r\n\r\n    pop() {\r\n        if (this.length() > 0) {return this.frontier.shift();}\r\n        return null;\r\n    }\r\n\r\n    push(item) {\r\n        this.frontier.push(item);\r\n    }\r\n\r\n    length() {\r\n        return this.frontier.length;\r\n    }\r\n}\r\n\r\nclass AstarStrategy {\r\n    constructor() {\r\n        this.frontier = new minHeap();\r\n    }\r\n\r\n    pop() {\r\n        if (this.length() > 0) {return this.frontier.pop()};\r\n        return null;\r\n    }\r\n\r\n    push(item) {\r\n        this.frontier.push(item)\r\n    }\r\n\r\n    length() {\r\n        return this.frontier.length();\r\n    }\r\n\r\n}\r\n\r\nexport {SearchStrategy};","import {isValid, generateNeeded, getDistance } from \"../utilities.js\";\r\nimport { SearchStrategy } from \"./SearchStrategy\"\r\n\r\nconst neighbors = [[-1, 0], [0, 1], [1,0], [0,-1]];\r\n\r\n/**\r\n * @param {Object (Graph), } grid\r\n * @param {String} type\r\n * @param {Object (node)} nodestart\r\n * @param {Object (node)} nodeend \r\n * @return {Array of Nodes} The path from start to end\r\n */\r\nfunction runGraphType(graph, type, nodestart, nodeend) {\r\n    const frontier = new SearchStrategy(type);\r\n    \r\n    const ROWS = graph.length;\r\n    const COLS = graph[0].length;\r\n\r\n    const seen = generateNeeded(ROWS, COLS, false);\r\n    \r\n    frontier.push(graph[nodestart[0]][nodestart[1]]);\r\n    seen[nodestart[0]][nodestart[1]] = true;\r\n    \r\n    const searched = []; //Order the nodes were searched in\r\n    const path = []; //The final path to get from start to end.\r\n    \r\n    searched.push(graph[nodestart[0]][nodestart[1]])\r\n    \r\n    while (frontier.length() > 0) {\r\n        const cur = frontier.pop();\r\n        const currow = cur.i\r\n        const curcol = cur.j\r\n        searched.push(graph[currow][curcol])\r\n        if (currow == nodeend[0] && curcol == nodeend[1]) {\r\n            const outpath = backTrack(cur)\r\n            return [searched, outpath];\r\n        }\r\n        for (var near= 0; near < neighbors.length; near++) {\r\n            \r\n            const newrow = currow + neighbors[near][0];\r\n            const newcol = curcol + neighbors[near][1];\r\n            \r\n            if (isValid(newrow, newcol, ROWS, COLS) && !seen[newrow][newcol] && !graph[newrow][newcol].wall){\r\n                seen[newrow][newcol] = true;\r\n                graph[newrow][newcol].dist = getDistance(graph[newrow][newcol], graph[nodeend[0]][nodeend[1]])\r\n                frontier.push(graph[newrow][newcol])\r\n                graph[newrow][newcol].from = cur\r\n               \r\n            }\r\n            \r\n        }\r\n       \r\n    }\r\n    return [searched, path];\r\n}\r\n\r\n/**\r\n * @param {Object (Node)} node \r\n * @return {Array of Nodes} The path from start to end\r\n */\r\n\r\nfunction backTrack(node) {\r\n    //Reconstructs the path form start to end not inclusive.\r\n    const path = [];\r\n    node = node.from;\r\n    while (node.from !== null) {\r\n        path.unshift(node);\r\n        node = node.from;\r\n    }\r\n    return path;\r\n}\r\n\r\nexport { runGraphType }","class Maze {\r\n    \r\n    constructor(grid, type) {\r\n        this.maze = null;\r\n        if (type === \"horizontal\" || type === \"vertical\") {\r\n            this.maze = new HorizontalVerticalMaze(grid, type)\r\n        } else {\r\n            this.maze = new RandomMaze(grid)\r\n        }\r\n    }\r\n\r\n    getMaze() {\r\n        return this.maze.getWallOrder();\r\n    }\r\n\r\n}\r\n\r\n\r\n// Generates a Horizontal or Vertically split maze depending on the original input choice.\r\nclass HorizontalVerticalMaze {\r\n    constructor(grid, type) {\r\n        this.searched = [];\r\n        this.grid = grid.slice();\r\n        this.gridWidth = grid[0].length;\r\n        this.gridHeight = grid.length;\r\n        this.addTopBottomSides();\r\n        this.mazify(1, this.gridWidth-1, 1,  this.gridHeight-1, type);\r\n    }\r\n\r\n    getWallOrder() {\r\n        return this.searched;\r\n    }\r\n\r\n    //Makes walls on top, bottom, and sides\r\n    addTopBottomSides() {\r\n        for(let i = 0; i < this.gridWidth; i++) {\r\n            this.searched.push(this.grid[0][i]);\r\n            this.searched.push(this.grid[this.gridHeight-1][i]);\r\n        }\r\n        for(let i = 0; i < this.gridHeight; i++) {\r\n            this.searched.push(this.grid[i][0]);\r\n            this.searched.push(this.grid[i][this.gridWidth - 1]);\r\n        }\r\n    }\r\n\r\n    isValid(i, j) {\r\n        return i >= 0 && i < this.gridWidth && j >= 0 && j < this.gridHeight;\r\n    }\r\n\r\n    nextToStartOrEnd(i, j) {\r\n        let around = [[0, 1], [0,-1], [1, 0], [-1, 0], [1, 1], [1, -1], [-1, -1], [-1, 1]];\r\n        for(let k = 0; k < around.length; k++) {\r\n            let cur = around[k];\r\n            let newi = i + cur[0]\r\n            let newj = j + cur[1]\r\n            if(this.isValid(newi, newj) && this.grid[newi][newj].start || this.grid[newi][newj].end) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    \r\n\r\n    mazify(lowWidth, highWidth, lowHeight, highHeight, type) {\r\n        if (type === \"vertical\") {\r\n            let mid = Math.floor((lowWidth + highWidth)/2)\r\n            if ((highWidth - lowWidth) > 2) {\r\n                \r\n                let midHeight = Math.floor((lowHeight+highHeight)/2);\r\n                let topRandom = Math.floor(Math.random() * (midHeight - lowHeight)) + lowHeight;\r\n                let botRandom = Math.floor(Math.random() * (highHeight - midHeight)) + midHeight; \r\n\r\n                for(let i = lowHeight; i < highHeight; i++) {\r\n                    let curNode = this.grid[i][mid];\r\n                    if(!curNode.start && !curNode.end && i != topRandom && i != botRandom && !this.nextToStartOrEnd(i, mid)) {\r\n                        this.searched.push(curNode);\r\n                    } \r\n                }\r\n\r\n                this.mazify(lowWidth, mid, lowHeight, highHeight, \"horizontal\");\r\n                this.mazify(mid+1, highWidth, lowHeight, highHeight, \"horizontal\");\r\n\r\n            }\r\n            \r\n        }\r\n\r\n        if (type === \"horizontal\") {\r\n            let mid = Math.floor((lowHeight + highHeight)/2);\r\n            if((highHeight - lowHeight) > 2) {\r\n\r\n                let midWidth = Math.floor((lowWidth+highWidth)/2);\r\n                let topRandom = Math.floor(Math.random() * (midWidth - lowWidth)) + lowWidth;\r\n                let botRandom = Math.floor(Math.random() * (highWidth - midWidth)) + midWidth; \r\n\r\n                for(let i = lowWidth; i < highWidth; i++) {\r\n                    let curNode = this.grid[mid][i];\r\n                    if(!curNode.start && !curNode.end && i != topRandom && i != botRandom && !this.nextToStartOrEnd(mid, i)) {\r\n                        this.searched.push(curNode);\r\n                    } \r\n                }\r\n\r\n                this.mazify(lowWidth, highWidth, lowHeight, mid, \"vertical\");\r\n                this.mazify(lowWidth, highWidth, mid+1, highHeight, \"vertical\");\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// Generates a random horizontally split maze.\r\nclass RandomMaze {\r\n\r\n    constructor(grid) {\r\n        this.searched = [];\r\n        this.grid = grid.slice();\r\n        this.gridWidth = grid[0].length;\r\n        this.gridHeight = grid.length;\r\n        this.addTopBottomSides();\r\n        this.mazify(1, this.gridWidth-1, 1,  this.gridHeight-1, \"horizontal\");\r\n    }\r\n\r\n    getWallOrder() {\r\n        return this.searched;\r\n    }\r\n\r\n    isValid(i, j) {\r\n        return i >= 0 && i < this.gridWidth && j >= 0 && j < this.gridHeight;\r\n    }\r\n\r\n    nextToStartOrEnd(i, j) {\r\n        let around = [[0, 1], [0,-1], [1, 0], [-1, 0], [1, 1], [1, -1], [-1, -1], [-1, 1]];\r\n        for(let k = 0; k < around.length; k++) {\r\n            let cur = around[k];\r\n            let newi = i + cur[0]\r\n            let newj = j + cur[1]\r\n            if(this.isValid(newi, newj) && this.grid[newi][newj].start || this.grid[newi][newj].end) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    addTopBottomSides() {\r\n        for(let i = 0; i < this.gridWidth; i++) {\r\n            this.searched.push(this.grid[0][i]);\r\n            this.searched.push(this.grid[this.gridHeight-1][i]);\r\n        }\r\n        for(let i = 0; i < this.gridHeight; i++) {\r\n            this.searched.push(this.grid[i][0]);\r\n            this.searched.push(this.grid[i][this.gridWidth - 1]);\r\n        }\r\n    }\r\n\r\n    mazify(lowWidth, highWidth, lowHeight, highHeight, type) {\r\n        if (type === \"vertical\") {\r\n            let mid = Math.floor((lowWidth + highWidth)/2)\r\n            if ((highWidth - lowWidth) > 2) {\r\n                for(let i = lowHeight; i < highHeight; i++) {\r\n                    let curNode = this.grid[i][mid];\r\n                    let chance = Math.random();\r\n                    if(!curNode.start && !curNode.end && chance <= .55 && !this.nextToStartOrEnd(i, mid)) {\r\n                        this.searched.push(curNode);\r\n                    }\r\n                }\r\n                this.mazify(lowWidth, mid, lowHeight, highHeight, \"horizontal\");\r\n                this.mazify(mid+1, highWidth, lowHeight, highHeight, \"horizontal\");\r\n            }\r\n            \r\n        }\r\n\r\n        if (type === \"horizontal\") {\r\n            let mid = Math.floor((lowHeight + highHeight)/2);\r\n            if((highHeight - lowHeight) > 2) {\r\n                for(let i = lowWidth; i < highWidth; i++) {\r\n                    let curNode = this.grid[mid][i];\r\n                    let chance = Math.random();\r\n                    if(!curNode.start && !curNode.end && chance < .55 && !this.nextToStartOrEnd(mid, i)) {\r\n                        this.searched.push(curNode);\r\n                    }\r\n                }\r\n                this.mazify(lowWidth, highWidth, lowHeight, mid, \"vertical\");\r\n                this.mazify(lowWidth, highWidth, mid+1, highHeight, \"vertical\");\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport { Maze };","import React, {Component} from 'react';\r\n\r\n\r\nexport default class Square extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        row: props.row,\r\n        col: props.col,\r\n        start: props.start,\r\n        end: props.end,\r\n        wall: props.wall,\r\n        handleDown: props.handleClick,\r\n        handleMove: props.handleMove,\r\n        handleUp: props.handleUp,\r\n      };\r\n    }\r\n  \r\n    \r\n    render() {\r\n      let classname = '';\r\n      let cls = '';\r\n      if (this.props.start) {\r\n        classname = ' square-start';\r\n        cls = 'glyphicon glyphicon-play-circle';\r\n      } else if (this.props.end) {\r\n        classname = ' square-end'\r\n        cls = 'glyphicon glyphicon-stop'\r\n      } else if (this.props.wall) {\r\n        classname = ' square-wall'\r\n        \r\n      } else {}\r\n      return (\r\n          <div id={String(this.props.row) + \"-\" + String(this.props.col)} className={`square` + classname} onMouseDown={() => this.props.handleDown(this.props.row, this.props.col)} onMouseUp={() => this.props.handleUp()} onMouseMove={() => this.props.handleMove(this.props.row, this.props.col)}>\r\n            <div className={cls}></div>\r\n          </div>\r\n      )  \r\n      \r\n    }\r\n  }","import React, {Component} from 'react';\r\nimport Button from 'react-bootstrap/Button'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\n\r\nexport default class MyNavbar extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        algo: props.algo,\r\n        runSelected: props.runSelected,\r\n        resetState: props.resetState,\r\n        mazify: props.mazify\r\n      }\r\n    }\r\n\r\n    render () {\r\n      return (\r\n        \r\n      <Navbar bg=\"dark\">\r\n        <div className=\"navbar-brand-center\">Algo-View</div>\r\n       \r\n        <Nav class=\"btn btn-toolbar\">\r\n          \r\n          <Dropdown as={ButtonGroup}>\r\n            \r\n            <Button className='btn btn-info'>Choose an Algorithm!</Button>\r\n\r\n            <Dropdown.Toggle className='btn btn-info'  id=\"dropdown-split-basic\" />\r\n\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => this.state.resetState(\"BFS\", false)}>Breadth-First Search</Dropdown.Item>\r\n              <Dropdown.Item onClick={() => this.state.resetState(\"DFS\", false)}>Depth-First Search</Dropdown.Item>\r\n              <Dropdown.Item onClick={() => this.state.resetState(\"ASTAR\", false)}>A*STAR Search</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n\r\n          </Dropdown>\r\n          \r\n         \r\n          <Dropdown class=\"nav-item\" as={ButtonGroup}>\r\n            \r\n            <Button className='btn btn-info' variant=\"success\">Maze Type!</Button>\r\n           \r\n            <Dropdown.Toggle className='btn btn-info'  id=\"dropdown-split-basic\" />\r\n           \r\n           <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => this.state.mazify(\"vertical\")}>Vertical Split</Dropdown.Item>\r\n              <Dropdown.Item onClick={() => this.state.mazify(\"horizontal\")}>Horizontal Split</Dropdown.Item>\r\n              <Dropdown.Item onClick={() => this.state.mazify(\"random\")}>Random Maze</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          \r\n          </Dropdown>\r\n          \r\n         \r\n            <Button className=\"btn btn-success\" id=\"simulate\" onClick={() => this.props.runSelected() }>See it!</Button>\r\n        \r\n            <Button className=\"btn btn-danger\" onClick={() => this.state.resetState(this.state.algo, true) }>RESET</Button>\r\n          \r\n         </Nav>\r\n        \r\n      </Navbar>\r\n      )\r\n        \r\n    }\r\n}","import { render } from '@testing-library/react';\r\nimport React, {Component} from 'react';\r\nimport \"../css/legend.css\";\r\n\r\nexport default class Legend extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <br></br>\r\n                <ul class=\"ul\">\r\n                    <li>\r\n                        <div className=\"start glyphicon glyphicon-play-circle\"></div>\r\n                        <br></br>\r\n                        <div>\r\n                            Start Node\r\n                        </div>\r\n                    </li>\r\n                    <li>\r\n                        <div className=\"end glyphicon glyphicon-stop\"></div>\r\n                        <br></br>\r\n                        <div>\r\n                            End Node\r\n                        </div>\r\n                    </li>\r\n                    <li>\r\n                        <div className=\"wall glyphicon\"></div>\r\n                        <br></br>\r\n                        <div>\r\n                            Wall\r\n                        </div>\r\n                    </li>\r\n                    <li>\r\n                        <div className=\"path glyphicon glyphicon-certificate\" ></div>\r\n                        <br></br>\r\n                        <div>    \r\n                            Path\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport Legend from './legend.jsx';\r\nimport '../css/subbanner.css';\r\n\r\nexport default class SubBanner extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: props.selected\r\n        }\r\n    }\r\n\r\n    getText() {\r\n        let begin = \"You've Chosen\"\r\n        console.log(this.props.selected)\r\n        if(this.props.selected == \"BFS\") {\r\n            return begin + \" Breadth-First Search\";\r\n        } else if(this.props.selected == \"DFS\") {\r\n            return begin + \" Depth-FirstSearch\";\r\n        } else if(this.props.selected == \"ASTAR\") {\r\n            return begin + \" A*Star Search\"\r\n        } else {\r\n            return begin + \" Breadth-First Search\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div >\r\n                <div class=\"subbanner\">{this.getText()}</div>\r\n                <div>\r\n                    <Legend></Legend>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { runGraphType } from './graph/graphAlgos';\r\nimport { makeGrid, generateGridWithNewNode} from './utilities';\r\nimport { Maze } from './maze/maze'\r\nimport Square from './square';\r\nimport MyNavbar from './navbar.jsx';\r\nimport SubBanner from './subbanner.jsx';\r\nimport Legend from './legend.jsx';\r\n\r\n\r\nconst NODESIZE = 34;\r\nconst NAVBARSIZE = 75;\r\n\r\n\r\nconst GRID_HEIGHT = Math.floor( (window.innerHeight - NODESIZE - NAVBARSIZE * 2 - NAVBARSIZE) / NODESIZE);\r\nconst GRID_WIDTH = Math.floor((window.innerWidth-NODESIZE*2) / NODESIZE);\r\nconst ROWEND = GRID_HEIGHT;\r\nconst COLEND = GRID_WIDTH;\r\n\r\nlet NODEROWSTART = Math.floor(GRID_HEIGHT / 2);\r\nlet NODECOLSTART = Math.floor(GRID_WIDTH / 2 / 2);\r\nlet NODEROWEND = NODEROWSTART;\r\nlet NODECOLEND = NODECOLSTART * 3;\r\n\r\nlet last_clicked_i = -1;\r\nlet last_clicked_j = -1;\r\n\r\nlet timeouts = []\r\n\r\nwindow.onresize = () => { window.location.reload(); };\r\n\r\nexport default class Board extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        grid: [],\r\n        downClick: false,\r\n        startClicked: false,\r\n        endclicked: false,\r\n        strategy: \"BFS\"\r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n      const grid = makeGrid(ROWEND, COLEND, NODEROWSTART, NODECOLSTART, NODEROWEND, NODECOLEND);\r\n      this.setState({ \r\n        grid: grid,\r\n      });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      if (timeouts.length > 0) {\r\n        for (let i = 0; i < timeouts.length; i++) {\r\n          clearTimeout(timeouts[i])\r\n        }\r\n      }\r\n      timeouts = []\r\n    }\r\n    \r\n    resetState = (algo, fromWall) => {\r\n      if (timeouts.length > 0) {\r\n        \r\n        for(let i = 0; i < timeouts.length; i++) {\r\n          clearTimeout(timeouts[i])\r\n        }\r\n        timeouts = []\r\n      }\r\n      for(let i = 0; i < ROWEND; i++) {\r\n        for(let j = 0; j < COLEND; j++) {\r\n          if (i === NODEROWSTART && j === NODECOLSTART || i === NODEROWEND && j === NODECOLEND) {\r\n            continue;\r\n          }\r\n          const id = String(i) + '-' + String(j);\r\n          if(fromWall) {\r\n            this.state.grid[i][j].wall = false;\r\n          }\r\n          if (!this.state.grid[i][j].wall) {\r\n            document.getElementById(id).className = 'square';\r\n          }\r\n        }\r\n      }\r\n      this.setState({ \r\n        strategy: algo\r\n      });\r\n    \r\n      \r\n      \r\n    }\r\n\r\n    runSelected = () => {\r\n      this.resetState(this.state.strategy, false)\r\n      const searchOrder = runGraphType(this.state.grid, this.state.strategy, [NODEROWSTART, NODECOLSTART], [NODEROWEND, NODECOLEND]);\r\n      this.animate(searchOrder[0], searchOrder[1]);\r\n    }\r\n\r\n    animate = (searchOrder, path) => {\r\n      for (let i = 0; i < searchOrder.length; i++) {\r\n        let animateTimer = setTimeout(() => {\r\n          const curSquare = searchOrder[i];\r\n          if (curSquare.end) {\r\n              this.animatePath(path);\r\n          }\r\n        \r\n          if (!curSquare.start && !curSquare.end) {\r\n            const id = String(curSquare.i) + '-' + String(curSquare.j);\r\n            document.getElementById(id).className = 'square square-seen';\r\n          }\r\n        }, 10 * i);\r\n        timeouts.push(animateTimer)\r\n      }\r\n    }\r\n    \r\n    animatePath = (path) => {\r\n      for (let j = 0; j < path.length; j++) {\r\n        let pathTimer = setTimeout(() => {\r\n          const pathSquare = path[j];\r\n          const id = String(pathSquare.i) + '-' + String(pathSquare.j);\r\n          document.getElementById(id).className = 'square square-path glyphicon glyphicon-certificate';\r\n        }, 20 * j);\r\n        timeouts.push(pathTimer)\r\n      }\r\n    }\r\n\r\n    animateWall = (wall) => {\r\n      for (let j = 0; j < wall.length; j++) {\r\n        let pathTimer = setTimeout(() => {\r\n          const wallSquare = wall[j];\r\n          wallSquare.wall = true;\r\n          const id = String(wallSquare.i) + '-' + String(wallSquare.j);\r\n          document.getElementById(id).className = 'square square-wall';\r\n        }, 20 * j);\r\n        timeouts.push(pathTimer)\r\n      }\r\n    }\r\n     \r\n    handleDown = (i, j) => {\r\n      if (i === NODEROWSTART && j === NODECOLSTART) {\r\n        this.resetState(this.state.strategy, false);\r\n        this.setState({\r\n          downClick: true,\r\n          startClicked: true\r\n        })\r\n      } else if (i === NODEROWEND && j === NODECOLEND) {\r\n        this.resetState(this.state.strategy, false);\r\n        this.setState({\r\n          downClick: true,\r\n          endClicked: true\r\n        })\r\n        \r\n      } else {\r\n          const updatedGrid = generateGridWithNewNode(this.state.grid, [NODEROWSTART, NODECOLSTART], [NODEROWEND, NODECOLEND], i, j, this.state.startClicked, this.state.endClicked)\r\n          last_clicked_i = i;\r\n          last_clicked_j = j;\r\n          this.setState({\r\n            grid: updatedGrid,\r\n            downClick: true\r\n          })\r\n        }\r\n\r\n    }\r\n  \r\n    handleMove = (i, j) => {\r\n      //console.log(\"handling Move\")\r\n      const downClicked = this.state.downClick;\r\n      const startClicked = this.state.startClicked;\r\n      const endClicked = this.state.endClicked;\r\n      if (downClicked && startClicked) {\r\n        if(!(i === NODEROWSTART && j === NODECOLSTART)) {\r\n          const updatedGrid = generateGridWithNewNode(this.state.grid, [NODEROWSTART, NODECOLSTART], [NODEROWEND, NODECOLEND], i, j, startClicked, endClicked);\r\n          NODEROWSTART = i;\r\n          NODECOLSTART = j;\r\n          this.setState({\r\n            grid: updatedGrid,\r\n          })\r\n          \r\n        }\r\n      } else if (downClicked && endClicked) {\r\n          if(!(i === NODEROWEND && j === NODECOLEND)){\r\n            const updatedGrid = generateGridWithNewNode(this.state.grid, [NODEROWSTART, NODECOLSTART], [NODEROWEND, NODECOLEND], i, j, startClicked, endClicked)\r\n            NODEROWEND = i;\r\n            NODECOLEND = j;\r\n            this.setState({\r\n              grid: updatedGrid,\r\n            })\r\n          }\r\n      } else if (downClicked && !(i == last_clicked_i && last_clicked_j == j)) {\r\n        const updatedGrid = generateGridWithNewNode(this.state.grid, [NODEROWSTART, NODECOLSTART], [NODEROWEND, NODECOLEND], i, j, startClicked, endClicked)\r\n        last_clicked_i = i;\r\n        last_clicked_j = j;\r\n        this.setState({\r\n          grid: updatedGrid,\r\n        })\r\n      }\r\n    }\r\n  \r\n    handleUp = () => {\r\n      //console.log(\"handling up\")\r\n      this.setState({\r\n        downClick: false,\r\n        startClicked: false,\r\n        endClicked: false,\r\n        strategy: this.state.strategy\r\n      })\r\n    }\r\n\r\n    mazify = (type) => {\r\n      this.resetState(this.state.strategy, true);\r\n      let maze = new Maze(this.state.grid, type);\r\n      this.animateWall(maze.getMaze());\r\n    }\r\n   \r\n    render() {\r\n      //const { grid } = this.state;  \r\n      return (\r\n        <div>\r\n         <MyNavbar algo={this.state.strategy} runSelected={this.runSelected} resetState={this.resetState} mazify={this.mazify}></MyNavbar>\r\n          <SubBanner selected={this.state.strategy}></SubBanner>\r\n          <div className='gridcol'>\r\n            {this.state.grid.map((row, id) => {\r\n              return (\r\n                <div key={id}>\r\n                  {row.map((square, rowkey) => {\r\n                    const {i, j, start, wall, end} = square;\r\n                    return (\r\n                      <Square\r\n                        key={rowkey}\r\n                        row={i}\r\n                        end={end}\r\n                        wall={wall}\r\n                        start={start}\r\n                        col={j}\r\n                        handleDown ={this.handleDown}\r\n                        handleMove = {this.handleMove}\r\n                        handleUp = {this.handleUp}\r\n                        >\r\n                        </Square>\r\n                    );\r\n                  })}\r\n                </div>\r\n                \r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        \r\n      )\r\n  }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './css/App.css';\r\nimport './css/styles.css';\r\nimport './css/navbar.css';\r\nimport Board from './scripts/board';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Board></Board>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}